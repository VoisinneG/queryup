% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query_uniprot.R
\name{query_uniprot}
\alias{query_uniprot}
\title{Retrieve data from uniprot using uniprot's REST API.}
\usage{
query_uniprot(
  query = NULL,
  columns = c("accession", "id", "gene_names", "organism_name", "reviewed"),
  print_url = FALSE,
  print_uniprot_messages = FALSE,
  max_keys = 300,
  updateProgress = NULL,
  show_progress = TRUE
)
}
\arguments{
\item{query}{list of keys corresponding to uniprot's query fields.
For example :
query = list("gene_exact" = c("Pik3r1", "Pik3r2"),
"organism_id" = c("10090", "9606"), "reviewed" = "true")}

\item{columns}{names of uniprot data columns to retrieve.
Examples include "accession", "id", "genes", "keywords", "sequence".}

\item{print_url}{logical. Prints the complete url used for the query.}

\item{print_uniprot_messages}{Boolean. Prints the raw error message returned
by UniProt.}

\item{max_keys}{maximum number of field items submitted}

\item{updateProgress}{used to display progress in shiny apps}

\item{show_progress}{Show progress bar}
}
\value{
a data.frame
}
\description{
Retrieve data from uniprot using uniprot's REST API.
To avoid non-responsive queries, they are splitted into
smaller queries with at most \code{max_keys} items per query field.
Not that it works only with queries where items within query fields are
collapsed with '+OR+' and different
query fields are collapsed with '+AND+' (see \code{query_uniprot()})
}
\examples{
# Query all reviewed UniProt entries for Mus musculus:
query = list("organism_id" = c("10090"), "reviewed" = "true")
df_mouse_reviewed <-  query_uniprot(query = query)
head(df_mouse_reviewed)

# List protein interactions within a set of UniProt entries
ids <- sample(df_mouse_reviewed$Entry, 400)
query <- list("accession_id" = ids, "interactor"= ids)
columns = c("accession", "cc_interaction")
res <- query_uniprot(query = query, columns = columns)
res
}
